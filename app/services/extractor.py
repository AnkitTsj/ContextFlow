
# import google.generativeai as genai
# import os

# def extract_context(chat_text: str):
#     api_key = os.environ.get("API_KEY")
#     print(api_key)
#     if not api_key:
#         return "Error: API key not configured."

#     genai.configure(api_key=api_key)

#     system_prompt = (
#         "Extract all important context from the following chat for future reference. "
#         "Categorize into technical, creative, research, personal. "
#         "Output as a markdown list with category headings."
#     )
#     combined_prompt = system_prompt + "\n\n" + chat_text

#     try:
#         model = genai.GenerativeModel('gemini-2.0-flash-lite')
#         response = model.generate_content(combined_prompt)
#         if response and hasattr(response, 'text'):
#             return response.text
#         elif hasattr(response, 'candidates'):
#             candidate = response.candidates[0]
#             return candidate.content.parts.text
#         else:
#             return "No content was generated by the model."
#     except Exception as e:
#         return f"An error occurred: {e}"

import google.generativeai as genai
import os
from app.utils.chatparser import ChatParser

def extract_context(chat_text: str):
    api_key = os.environ.get("API_KEY")
    if not api_key:
        return "Error: API key not configured."

    genai.configure(api_key=api_key)
    
    # Detect format and clean chat
    chat_format = ChatParser.detect_format(chat_text)
    cleaned_chat = ChatParser.clean_chat(chat_text)
    
    # Enhanced system prompt based on format
    system_prompt = f"""
    Analyze this {chat_format} conversation and extract the most important context for future reference.
    
    Focus on:
    1. **Technical Information**: APIs, code snippets, configurations, troubleshooting steps
    2. **Decisions Made**: Important choices, preferences, or conclusions reached
    3. **Research Findings**: Key insights, data, or discoveries mentioned
    4. **Action Items**: Tasks, next steps, or things to remember
    5. **Personal Context**: Preferences, constraints, or background information
    
    Format as a clean markdown with clear sections. Be concise but comprehensive.
    Only include information that would be valuable for continuing the conversation later.
    """
    
    combined_prompt = system_prompt + "\n\nConversation:\n" + cleaned_chat

    try:
        model = genai.GenerativeModel('gemini-2.0-flash-lite')
        response = model.generate_content(combined_prompt)
        
        if response and hasattr(response, 'text'):
            extracted = response.text
        elif hasattr(response, 'candidates') and response.candidates:
            candidate = response.candidates[0]
            extracted = candidate.content.parts.text
        else:
            return "No content was generated by the model."
            
        # Add metadata
        metadata = f"\n\n---\n*Source: {chat_format.title()} conversation â€¢ Processed: {len(cleaned_chat)} characters*"
        return extracted + metadata
        
    except Exception as e:
        return f"An error occurred during extraction: {e}"



